// <auto-generated />
using System;
using InventoryExpress.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventoryExpress.Model.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    partial class InventoryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("InventoryExpress.Model.Entity.Ascription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("CHAR(36)");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MediaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MediaID");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR (64)");

                    b.Property<string>("Tag")
                        .HasColumnType("VARCHAR (256)");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("MediaId");

                    b.ToTable("Ascription", (string)null);
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("Guid");

                    b.Property<int?>("MediaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MediaID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(64)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("MediaId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Attribute", (string)null);
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Condition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<int>("Grade")
                        .HasColumnType("INTEGER (1)")
                        .HasColumnName("Grade");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("CHAR (36)")
                        .HasColumnName("Guid");

                    b.Property<int?>("MediaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MediaID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR (64)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.ToTable("Condition", (string)null);
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.CostCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("Guid");

                    b.Property<int?>("MediaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MediaID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(64)")
                        .HasColumnName("Name");

                    b.Property<string>("Tag")
                        .HasColumnType("VARCHAR(256)")
                        .HasColumnName("Tag");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("MediaId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CostCenter", (string)null);
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<int?>("ConditionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ConditionID");

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CostCenterID");

                    b.Property<decimal>("CostValue")
                        .HasColumnType("DECIMAL")
                        .HasColumnName("CostValue");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DerecognitionDate")
                        .HasColumnType("DATE")
                        .HasColumnName("DerecognitionDate");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("Guid");

                    b.Property<int?>("LedgerAccountId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LedgerAccountID");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LocationID");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ManufacturerID");

                    b.Property<int?>("MediaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MediaID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(64)")
                        .HasColumnName("Name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("DATE")
                        .HasColumnName("PurchaseDate");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SupplierID");

                    b.Property<string>("Tag")
                        .HasColumnType("VARCHAR(256)")
                        .HasColumnName("Tag");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TemplateID");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("ConditionId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("LedgerAccountId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("MediaId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Inventory", (string)null);
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.InventoryAttachment", b =>
                {
                    b.Property<int>("InventoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("InventoryID");

                    b.Property<int>("MediaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MediaID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("InventoryId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("InventoryAttachment", (string)null);
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.InventoryAttribute", b =>
                {
                    b.Property<int>("InventoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("InventoryID");

                    b.Property<int>("AttributeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AttributeID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Value");

                    b.HasKey("InventoryId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("InventoryAttribute", (string)null);
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.InventoryComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT")
                        .HasColumnName("COMMENT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("CREATED")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("CHAR (36)")
                        .HasColumnName("GUID");

                    b.Property<int>("InventoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("InventoryID");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("UPDATED")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryComment", (string)null);
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.InventoryJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("CHAR(36)");

                    b.Property<int>("InventoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("InventoryID");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryJournal", (string)null);
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.InventoryJournalParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("CHAR (36)");

                    b.Property<int>("InventoryJournalId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("InventoryJournalID");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR (256)");

                    b.Property<string>("NewValue")
                        .HasColumnType("VARCHAR (256)");

                    b.Property<string>("OldValue")
                        .HasColumnType("VARCHAR (256)");

                    b.HasKey("Id");

                    b.HasIndex("InventoryJournalId");

                    b.ToTable("InventoryJournalParameter", (string)null);
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.InventoryTag", b =>
                {
                    b.Property<int>("InventoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("InventoryID");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TagID");

                    b.HasKey("InventoryId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("InventoryTag", (string)null);
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.LedgerAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("Guid");

                    b.Property<int?>("MediaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MediaID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(64)")
                        .HasColumnName("Name");

                    b.Property<string>("Tag")
                        .HasColumnType("VARCHAR(256)")
                        .HasColumnName("Tag");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("MediaId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("LedgerAccount", (string)null);
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<string>("Address")
                        .HasColumnType("VARCHAR (256)")
                        .HasColumnName("Address");

                    b.Property<string>("Building")
                        .HasColumnType("VARCHAR (64)")
                        .HasColumnName("Building");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("CHAR (36)")
                        .HasColumnName("Guid");

                    b.Property<int?>("MediaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MediaID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR (64)")
                        .HasColumnName("Name");

                    b.Property<string>("Place")
                        .HasColumnType("VARCHAR (64)")
                        .HasColumnName("Place");

                    b.Property<string>("Room")
                        .HasColumnType("VARCHAR (64)")
                        .HasColumnName("Room");

                    b.Property<string>("Tag")
                        .HasColumnType("VARCHAR (256)")
                        .HasColumnName("Tag");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Zip")
                        .HasColumnType("VARCHAR (10)")
                        .HasColumnName("Zip");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("MediaId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<string>("Address")
                        .HasColumnType("VARCHAR(256)")
                        .HasColumnName("Address");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("Guid");

                    b.Property<int?>("MediaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MediaID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(64)")
                        .HasColumnName("Name");

                    b.Property<string>("Place")
                        .HasColumnType("VARCHAR(64)")
                        .HasColumnName("Place");

                    b.Property<string>("Tag")
                        .HasColumnType("VARCHAR(256)")
                        .HasColumnName("Tag");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Zip")
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("Zip");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("MediaId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Manufacturer", (string)null);
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("Guid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(64)")
                        .HasColumnName("Name");

                    b.Property<string>("Tag")
                        .HasColumnType("VARCHAR(256)")
                        .HasColumnName("Tag");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("Media", (string)null);
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("Currency");

                    b.HasKey("Id");

                    b.ToTable("Setting", (string)null);
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<string>("Address")
                        .HasColumnType("VARCHAR (256)")
                        .HasColumnName("Address");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("CHAR (36)")
                        .HasColumnName("Guid");

                    b.Property<int?>("MediaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MediaID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR (64)")
                        .HasColumnName("Name");

                    b.Property<string>("Place")
                        .HasColumnType("VARCHAR (64)")
                        .HasColumnName("Place");

                    b.Property<string>("Tag")
                        .HasColumnType("VARCHAR (256)")
                        .HasColumnName("Tag");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Zip")
                        .HasColumnType("VARCHAR (10)")
                        .HasColumnName("Zip");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("MediaId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("VARCHAR(64)")
                        .HasColumnName("Label");

                    b.HasKey("Id");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("CHAR(36)")
                        .HasColumnName("Guid");

                    b.Property<int?>("MediaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MediaID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(64)")
                        .HasColumnName("Name");

                    b.Property<string>("Tag")
                        .HasColumnType("VARCHAR(256)")
                        .HasColumnName("Tag");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("MediaId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Template", (string)null);
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.TemplateAttribute", b =>
                {
                    b.Property<int>("TemplateId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TemplateID");

                    b.Property<int>("AttributeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AttributeID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("Created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("TemplateId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("TemplateAttribute", (string)null);
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Ascription", b =>
                {
                    b.HasOne("InventoryExpress.Model.Entity.Inventory", null)
                        .WithMany("Ascriptions")
                        .HasForeignKey("InventoryId");

                    b.HasOne("InventoryExpress.Model.Entity.Media", "Media")
                        .WithMany("Ascriptions")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Media");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Attribute", b =>
                {
                    b.HasOne("InventoryExpress.Model.Entity.Media", "Media")
                        .WithMany("Attributes")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Media");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Condition", b =>
                {
                    b.HasOne("InventoryExpress.Model.Entity.Media", "Media")
                        .WithMany("Conditions")
                        .HasForeignKey("MediaId");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.CostCenter", b =>
                {
                    b.HasOne("InventoryExpress.Model.Entity.Media", "Media")
                        .WithMany("CostCenters")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Media");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Inventory", b =>
                {
                    b.HasOne("InventoryExpress.Model.Entity.Condition", "Condition")
                        .WithMany("Inventories")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("InventoryExpress.Model.Entity.CostCenter", "CostCenter")
                        .WithMany("Inventories")
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("InventoryExpress.Model.Entity.LedgerAccount", "LedgerAccount")
                        .WithMany("Inventories")
                        .HasForeignKey("LedgerAccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("InventoryExpress.Model.Entity.Location", "Location")
                        .WithMany("Inventories")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("InventoryExpress.Model.Entity.Manufacturer", "Manufacturer")
                        .WithMany("Inventories")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("InventoryExpress.Model.Entity.Media", "Media")
                        .WithMany("Inventories")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("InventoryExpress.Model.Entity.Inventory", "Parent")
                        .WithMany("Inventories")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("InventoryExpress.Model.Entity.Supplier", "Supplier")
                        .WithMany("Inventories")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("InventoryExpress.Model.Entity.Template", "Template")
                        .WithMany("Inventories")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Condition");

                    b.Navigation("CostCenter");

                    b.Navigation("LedgerAccount");

                    b.Navigation("Location");

                    b.Navigation("Manufacturer");

                    b.Navigation("Media");

                    b.Navigation("Parent");

                    b.Navigation("Supplier");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.InventoryAttachment", b =>
                {
                    b.HasOne("InventoryExpress.Model.Entity.Inventory", "Inventory")
                        .WithMany("InventoryMedia")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryExpress.Model.Entity.Media", "Media")
                        .WithMany("InventoryAttachment")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.InventoryAttribute", b =>
                {
                    b.HasOne("InventoryExpress.Model.Entity.Attribute", "Attribute")
                        .WithMany("InventoryAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryExpress.Model.Entity.Inventory", "Inventory")
                        .WithMany("InventoryAttributes")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.InventoryComment", b =>
                {
                    b.HasOne("InventoryExpress.Model.Entity.Inventory", "Inventory")
                        .WithMany("InventoryComments")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.InventoryJournal", b =>
                {
                    b.HasOne("InventoryExpress.Model.Entity.Inventory", "Inventory")
                        .WithMany("InventoryJournals")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.InventoryJournalParameter", b =>
                {
                    b.HasOne("InventoryExpress.Model.Entity.InventoryJournal", "InventoryJournal")
                        .WithMany("InventoryJournalParameters")
                        .HasForeignKey("InventoryJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryJournal");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.InventoryTag", b =>
                {
                    b.HasOne("InventoryExpress.Model.Entity.Inventory", "Inventory")
                        .WithMany("InventoryTag")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryExpress.Model.Entity.Tag", "Tag")
                        .WithMany("InventoryTag")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.LedgerAccount", b =>
                {
                    b.HasOne("InventoryExpress.Model.Entity.Media", "Media")
                        .WithMany("LedgerAccounts")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Media");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Location", b =>
                {
                    b.HasOne("InventoryExpress.Model.Entity.Media", "Media")
                        .WithMany("Locations")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Media");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Manufacturer", b =>
                {
                    b.HasOne("InventoryExpress.Model.Entity.Media", "Media")
                        .WithMany("Manufacturers")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Media");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Supplier", b =>
                {
                    b.HasOne("InventoryExpress.Model.Entity.Media", "Media")
                        .WithMany("Suppliers")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Media");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Template", b =>
                {
                    b.HasOne("InventoryExpress.Model.Entity.Media", "Media")
                        .WithMany("Templates")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Media");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.TemplateAttribute", b =>
                {
                    b.HasOne("InventoryExpress.Model.Entity.Attribute", "Attribute")
                        .WithMany("TemplateAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryExpress.Model.Entity.Template", "Template")
                        .WithMany("TemplateAttributes")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Attribute", b =>
                {
                    b.Navigation("InventoryAttributes");

                    b.Navigation("TemplateAttributes");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Condition", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.CostCenter", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Inventory", b =>
                {
                    b.Navigation("Ascriptions");

                    b.Navigation("Inventories");

                    b.Navigation("InventoryAttributes");

                    b.Navigation("InventoryComments");

                    b.Navigation("InventoryJournals");

                    b.Navigation("InventoryMedia");

                    b.Navigation("InventoryTag");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.InventoryJournal", b =>
                {
                    b.Navigation("InventoryJournalParameters");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.LedgerAccount", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Location", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Manufacturer", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Media", b =>
                {
                    b.Navigation("Ascriptions");

                    b.Navigation("Attributes");

                    b.Navigation("Conditions");

                    b.Navigation("CostCenters");

                    b.Navigation("Inventories");

                    b.Navigation("InventoryAttachment");

                    b.Navigation("LedgerAccounts");

                    b.Navigation("Locations");

                    b.Navigation("Manufacturers");

                    b.Navigation("Suppliers");

                    b.Navigation("Templates");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Supplier", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Tag", b =>
                {
                    b.Navigation("InventoryTag");
                });

            modelBuilder.Entity("InventoryExpress.Model.Entity.Template", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("TemplateAttributes");
                });
#pragma warning restore 612, 618
        }
    }
}
